"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSimplifiedErrorMessageFromEthersError = exports.getRevertReasonFromTransaction = exports.decodeRevertReason = exports.getRevertReasonFromError = exports.extractHostname = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const strings_1 = require("@ethersproject/strings");
const extractHostname = (url) => {
    let hostname;
    if (url.indexOf("//") > -1) {
        hostname = url.split("/")[2];
    }
    else {
        hostname = url.split("/")[0];
    }
    //find & remove port number
    hostname = hostname.split(":")[0];
    //find & remove "?"
    hostname = hostname.split("?")[0];
    return hostname;
};
exports.extractHostname = extractHostname;
const getRevertReasonFromError = (error) => {
    var _a, _b, _c, _d, _e, _f;
    return ((_f = (_c = (_b = (_a = error.message) === null || _a === void 0 ? void 0 : _a.split('reason="')[1]) === null || _b === void 0 ? void 0 : _b.split('", code')[0]) !== null && _c !== void 0 ? _c : (_e = (_d = error.error) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message) !== null && _f !== void 0 ? _f : "no error message");
};
exports.getRevertReasonFromError = getRevertReasonFromError;
const decodeRevertReason = (code) => {
    try {
        let codeString = `0x${code.substr(138)}`.replace(/0+$/, "");
        if (codeString.length % 2 === 1) {
            codeString += "0";
        }
        return (0, strings_1.toUtf8String)(codeString);
    }
    catch (error) {
        return "Could not decode revert reason";
    }
};
exports.decodeRevertReason = decodeRevertReason;
const getRevertReasonFromTransaction = (provider, tx, blockNumber) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    let revertReason;
    try {
        const code = yield provider.call(tx, blockNumber);
        let codeString = `0x${code.substr(138)}`.replace(/0+$/, "");
        if (codeString.length % 2 === 1) {
            codeString += "0";
        }
        revertReason = (0, strings_1.toUtf8String)(codeString);
    }
    catch (error) {
        // Locally it will throw
        revertReason = (_a = error.error) === null || _a === void 0 ? void 0 : _a.message.split("VM Exception while processing transaction: revert ")[1];
    }
    return revertReason;
});
exports.getRevertReasonFromTransaction = getRevertReasonFromTransaction;
/* eslint-disable @typescript-eslint/no-explicit-any */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getSimplifiedErrorMessageFromEthersError = (error) => {
    try {
        const jsonError = JSON.parse(JSON.stringify(error));
        if (jsonError.reason && jsonError.code) {
            if (jsonError.error && jsonError.error.reason && jsonError.error.code) {
                if (jsonError.error.serverError) {
                    return `reason: ${jsonError.reason}, code: ${jsonError.code}, error: { reason: ${jsonError.error.reason}, code: ${jsonError.error.code}, serverErrorCode: ${jsonError.error.serverError.code}${jsonError.error.url
                        ? `, url: ${(0, exports.extractHostname)(jsonError.error.url)}`
                        : ""}}`;
                }
                return `reason: ${jsonError.reason}, code: ${jsonError.code}, error: { reason: ${jsonError.error.reason}, code: ${jsonError.error.code}${jsonError.error.url
                    ? `, url: ${(0, exports.extractHostname)(jsonError.error.url)}`
                    : ""} }`;
            }
            return `reason: ${jsonError.reason}, code: ${jsonError.code}`;
        }
        else
            return error.message;
    }
    catch (e) {
        return error.message;
    }
};
exports.getSimplifiedErrorMessageFromEthersError = getSimplifiedErrorMessageFromEthersError;
