/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TaskTreasuryUpgradableInterface extends utils.Interface {
  functions: {
    "MIN_SHARES_IN_TREASURY()": FunctionFragment;
    "depositFunds(address,address,uint256)": FunctionFragment;
    "getCreditTokensByUser(address)": FunctionFragment;
    "getTotalCreditTokensByUser(address)": FunctionFragment;
    "getWhitelistedServices()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "maxFee()": FunctionFragment;
    "oldTreasury()": FunctionFragment;
    "shares(address,address)": FunctionFragment;
    "totalShares(address)": FunctionFragment;
    "totalUserTokenBalance(address,address)": FunctionFragment;
    "updateMaxFee(uint256)": FunctionFragment;
    "updateWhitelistedService(address,bool)": FunctionFragment;
    "useFunds(address,address,uint256)": FunctionFragment;
    "userTokenBalance(address,address)": FunctionFragment;
    "withdrawFunds(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_SHARES_IN_TREASURY"
      | "depositFunds"
      | "getCreditTokensByUser"
      | "getTotalCreditTokensByUser"
      | "getWhitelistedServices"
      | "initialize"
      | "maxFee"
      | "oldTreasury"
      | "shares"
      | "totalShares"
      | "totalUserTokenBalance"
      | "updateMaxFee"
      | "updateWhitelistedService"
      | "useFunds"
      | "userTokenBalance"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_SHARES_IN_TREASURY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditTokensByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCreditTokensByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedServices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oldTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "totalShares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalUserTokenBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistedService",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "useFunds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_SHARES_IN_TREASURY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditTokensByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCreditTokensByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oldTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "FundsDeposited(address,address,uint256)": EventFragment;
    "FundsWithdrawn(address,address,address,uint256)": EventFragment;
    "LogDeductFees(address,address,address,uint256,address)": EventFragment;
    "UpdatedMaxFee(uint256)": EventFragment;
    "UpdatedService(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeductFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedService"): EventFragment;
}

export interface FundsDepositedEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
}
export type FundsDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  FundsDepositedEventObject
>;

export type FundsDepositedEventFilter = TypedEventFilter<FundsDepositedEvent>;

export interface FundsWithdrawnEventObject {
  receiver: string;
  initiator: string;
  token: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, string, string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface LogDeductFeesEventObject {
  user: string;
  executor: string;
  token: string;
  fees: BigNumber;
  service: string;
}
export type LogDeductFeesEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  LogDeductFeesEventObject
>;

export type LogDeductFeesEventFilter = TypedEventFilter<LogDeductFeesEvent>;

export interface UpdatedMaxFeeEventObject {
  maxFee: BigNumber;
}
export type UpdatedMaxFeeEvent = TypedEvent<
  [BigNumber],
  UpdatedMaxFeeEventObject
>;

export type UpdatedMaxFeeEventFilter = TypedEventFilter<UpdatedMaxFeeEvent>;

export interface UpdatedServiceEventObject {
  service: string;
  add: boolean;
}
export type UpdatedServiceEvent = TypedEvent<
  [string, boolean],
  UpdatedServiceEventObject
>;

export type UpdatedServiceEventFilter = TypedEventFilter<UpdatedServiceEvent>;

export interface TaskTreasuryUpgradable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TaskTreasuryUpgradableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_SHARES_IN_TREASURY(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTotalCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getWhitelistedServices(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    oldTreasury(overrides?: CallOverrides): Promise<[string]>;

    shares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalShares(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateMaxFee(
      _newMaxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhitelistedService(
      _service: string,
      _add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useFunds(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_SHARES_IN_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

  depositFunds(
    _receiver: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditTokensByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalCreditTokensByUser(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getWhitelistedServices(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _maxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxFee(overrides?: CallOverrides): Promise<BigNumber>;

  oldTreasury(overrides?: CallOverrides): Promise<string>;

  shares(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalUserTokenBalance(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateMaxFee(
    _newMaxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhitelistedService(
    _service: string,
    _add: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useFunds(
    _user: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userTokenBalance(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFunds(
    _receiver: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_SHARES_IN_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    depositFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getWhitelistedServices(overrides?: CallOverrides): Promise<string[]>;

    initialize(_maxFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    maxFee(overrides?: CallOverrides): Promise<BigNumber>;

    oldTreasury(overrides?: CallOverrides): Promise<string>;

    shares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalUserTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMaxFee(
      _newMaxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelistedService(
      _service: string,
      _add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    useFunds(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundsDeposited(address,address,uint256)"(
      sender?: string | null,
      token?: string | null,
      amount?: BigNumberish | null
    ): FundsDepositedEventFilter;
    FundsDeposited(
      sender?: string | null,
      token?: string | null,
      amount?: BigNumberish | null
    ): FundsDepositedEventFilter;

    "FundsWithdrawn(address,address,address,uint256)"(
      receiver?: string | null,
      initiator?: string | null,
      token?: string | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      receiver?: string | null,
      initiator?: string | null,
      token?: string | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "LogDeductFees(address,address,address,uint256,address)"(
      user?: string | null,
      executor?: string | null,
      token?: string | null,
      fees?: null,
      service?: null
    ): LogDeductFeesEventFilter;
    LogDeductFees(
      user?: string | null,
      executor?: string | null,
      token?: string | null,
      fees?: null,
      service?: null
    ): LogDeductFeesEventFilter;

    "UpdatedMaxFee(uint256)"(
      maxFee?: BigNumberish | null
    ): UpdatedMaxFeeEventFilter;
    UpdatedMaxFee(maxFee?: BigNumberish | null): UpdatedMaxFeeEventFilter;

    "UpdatedService(address,bool)"(
      service?: string | null,
      add?: null
    ): UpdatedServiceEventFilter;
    UpdatedService(
      service?: string | null,
      add?: null
    ): UpdatedServiceEventFilter;
  };

  estimateGas: {
    MIN_SHARES_IN_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    depositFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedServices(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxFee(overrides?: CallOverrides): Promise<BigNumber>;

    oldTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    shares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalUserTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMaxFee(
      _newMaxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhitelistedService(
      _service: string,
      _add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useFunds(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_SHARES_IN_TREASURY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalCreditTokensByUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedServices(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUserTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMaxFee(
      _newMaxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhitelistedService(
      _service: string,
      _add: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useFunds(
      _user: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userTokenBalance(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _receiver: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
