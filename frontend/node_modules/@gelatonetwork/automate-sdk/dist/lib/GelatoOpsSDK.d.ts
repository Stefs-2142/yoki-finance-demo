import "ethers";
import { Signer } from "@ethersproject/abstract-signer";
import { Overrides } from "ethers";
import { CreateTaskOptions, CreateTaskOptionsWithModules, Task } from "../types";
import { TaskTransaction } from "../types";
export declare class GelatoOpsSDK {
    private _opsModule;
    private readonly _chainId;
    private readonly _signer;
    private _ops;
    private _token;
    private readonly _signatureMessage;
    constructor(chainId: number, signer: Signer, signatureMessage?: string);
    getActiveTasks(): Promise<Task[]>;
    getDedicatedMsgSender(): Promise<{
        address: string;
        isDeployed: boolean;
    }>;
    getTaskId(_args: CreateTaskOptions): Promise<string>;
    protected _getTaskId(args: CreateTaskOptionsWithModules): Promise<string>;
    protected _getLegacyTaskId(args: CreateTaskOptionsWithModules): Promise<string>;
    createTask(_args: CreateTaskOptions, overrides?: Overrides): Promise<TaskTransaction>;
    private _processModules;
    private _finalizeTaskCreation;
    cancelTask(taskId: string, overrides?: Overrides): Promise<TaskTransaction>;
    isGnosisSafeApp: () => boolean;
    private _requestAndStoreSignature;
    private _setTaskName;
    renameTask(taskId: string, name: string): Promise<void>;
    private _setContractAbi;
    private _postTaskApi;
}
