"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthToken = void 0;
const siwe_1 = require("siwe");
const getAuthToken = (signer, override) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const domain = "app.gelato.network";
        const uri = "http://beta.app.gelato.network/";
        const address = yield signer.getAddress();
        const version = "1";
        const chainId = 1;
        const statement = "Sign this message to upload/fetch JsResolver";
        const expirationTimestamp = Date.now() + 600000;
        const expirationTime = new Date(expirationTimestamp).toISOString();
        const siweMessage = new siwe_1.SiweMessage(Object.assign({ domain,
            statement,
            uri,
            address,
            version,
            chainId,
            expirationTime }, override));
        const message = siweMessage.prepareMessage();
        const signature = yield signer.signMessage(message);
        const authToken = Buffer.from(JSON.stringify({ message, signature })).toString("base64");
        console.log(authToken);
        return authToken;
    }
    catch (err) {
        throw new Error(`Signing message failed. \n${err.message}`);
    }
});
exports.getAuthToken = getAuthToken;
