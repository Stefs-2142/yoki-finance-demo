"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsResolverSecrets = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
class JsResolverSecrets {
    constructor(signer, signature) {
        this._signer = signer;
        this._userApi = axios_1.default.create({
            baseURL: constants_1.OPS_USER_API,
        });
        this._signature = signature;
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const address = yield this._signer.getAddress();
                const authToken = yield this._signature.getAuthToken();
                const res = yield this._userApi.get(`/users/${address}/secrets/${key}`, {
                    headers: { Authorization: `Bearer ${authToken}` },
                });
                const secret = res.data[key];
                return secret;
            }
            catch (err) {
                const errMsg = (0, utils_1.errorMessage)(err);
                throw new Error(`Fail to get secret for key "${key}". \n${errMsg}`);
            }
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const address = yield this._signer.getAddress();
                const authToken = yield this._signature.getAuthToken();
                const res = yield this._userApi.get(`/users/${address}/secrets`, {
                    headers: { Authorization: `Bearer ${authToken}` },
                });
                return res.data;
            }
            catch (err) {
                const errMsg = (0, utils_1.errorMessage)(err);
                throw new Error(`Fail to list all secrets. \n${errMsg}`);
            }
        });
    }
    set(secrets) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const address = yield this._signer.getAddress();
                const authToken = yield this._signature.getAuthToken();
                yield this._userApi.post(`/users/${address}/secrets`, Object.assign({}, secrets), {
                    headers: { Authorization: `Bearer ${authToken}` },
                });
            }
            catch (err) {
                const errMsg = (0, utils_1.errorMessage)(err);
                throw new Error(`Fail to set secrets ${secrets}. \n${errMsg}`);
            }
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const address = yield this._signer.getAddress();
                const authToken = yield this._signature.getAuthToken();
                yield this._userApi.delete(`/users/${address}/secrets/${key}`, {
                    headers: { Authorization: `Bearer ${authToken}` },
                });
            }
            catch (err) {
                const errMsg = (0, utils_1.errorMessage)(err);
                throw new Error(`Fail to delete secret "${key}". \n${errMsg}`);
            }
        });
    }
}
exports.JsResolverSecrets = JsResolverSecrets;
